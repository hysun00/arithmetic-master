package addition.prefixadder.graph

import addition.prefixadder.PrefixAdder
import addition.prefixadder.common.CommonPrefixSum

import scala.util.matching.Regex
import os._


/** This represents the graph of the prefix-sum operation, or "prefix graph" for short.
  * It is constructed as a sequence of [[PrefixNode]]
  *
  * @param nodes a sequnce of [[PrefixNode]] containing all the operational nodes in the prefix graph.
  */
case class PrefixGraph(nodes: Seq[PrefixNode]) {
  override def toString: String =
    "digraph G {\n" + (nodes.map { node =>
      s""""${node.toString}" [pos="${node.level},${node.bit}"];"""
    } ++ nodes.flatMap { node =>
      node.fathers.map { father =>
        s""""${father.toString}" -> "${node.toString}";"""
      }
    }).reduce(_ + "\n" + _) + "\n}"

  /** Works out the width of the prefix graph
    */
  def width: Int = nodes.map(_.bit).max + 1

  /** Works out the depth of the prefix graph
    */
  def depth: Int = nodes.map(_.level).max

  /** Selects the nodes with the specific bit
    */
  def bit(bit: Int): Seq[PrefixNode] = nodes.filter(_.bit == bit)

  /** Selects the nodes with the specific level
    */
  def level(level: Int): Seq[PrefixNode] = nodes.filter(_.level == level)

  /** Selects the nodes in the deepest level
    */
  def lastLevelNode: Seq[PrefixNode] =
    nodes.groupBy(_.bit).map { case (level, node) => node.filter(_.prefixData.contains(0)).max }.toSeq
}


/** Major construction method of [[PrefixGraph]] is defined in its companion object.
  */
object PrefixGraph {
  /** Receives a set of PrefixNodes and returns a sorted sequence of PrefixNodes
    *
    * @param nodes a set of PrefixNodes not yet sorted
    * @return [[PrefixGraph]] a sorted sequence of PrefixNodes
    */
  def apply(nodes: Set[PrefixNode]): PrefixGraph = new PrefixGraph(nodes.toSeq.sorted)

  /** Converts  [[dotGraph]] into [[PrefixGraph]]
    *
    * @param path file path of the .dot file
    * @return prefix graph
    */
  def apply(path: Path): PrefixGraph = {
    val dotGraph: DotGraph = upickle.default.read[DotGraph](os.read(path))
    val pattern:  Regex = "Node([0-9]+)-([0-9]+)".r
    var dotMap:   Map[Int, PrefixNode] = Map[Int, PrefixNode]()
    dotGraph.nodes.map { dotNode =>
      val pattern(level, bit) = dotNode.name
      (dotNode.index, level.toInt, bit.toInt)
    }
      .sortBy(_._1)
      .foreach {
        case (index: Int, level: Int, bit: Int) =>
          dotMap += (index -> (if (level == 0) PrefixNode(bit)
                               else
                                 PrefixNode(
                                   dotGraph.edges.filter(_.head == index).map(dotEdge => dotMap(dotEdge.tail)): _*
                                 )))
      }
    apply(dotMap.values.toSet)
  }
}

object CommonSumByConsole extends HasPrefixSumWithGraphImp with CommonPrefixSum {
  val filePath = Path(io.StdIn.readLine("Import your graph generated by `dot -Txdot_json`: "), pwd)
  val fileName = filePath.baseName
  val prefixGraph: PrefixGraph = PrefixGraph(filePath)
}

class ConsoleCommonAdderWithGraph extends PrefixAdder(CommonSumByConsole.prefixGraph.width, CommonSumByConsole) {
  override val desiredName = CommonSumByConsole.fileName
}
